# -*- coding: utf-8 -*-
"""H3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-oT1rOJMh9pW84BRXDJA_i9U-MKlp6O4
"""

pip install osmnx

import osmnx as ox
import geopandas as gpd
import pandas as pd

# Define the query for restaurants
query = {"amenity": "restaurant"}

# Fetch restaurant data for Bengaluru
restaurants = ox.features_from_place("Bengaluru, India", query)

# Convert to a GeoDataFrame
restaurants_gdf = gpd.GeoDataFrame(restaurants, geometry=restaurants.geometry)

# Filter only Point geometries (ignore Polygon/LineString)
restaurants_gdf = restaurants_gdf[restaurants_gdf.geometry.geom_type == "Point"]

# Extract latitude and longitude
restaurants_gdf["latitude"] = restaurants_gdf.geometry.y
restaurants_gdf["longitude"] = restaurants_gdf.geometry.x

# Save as CSV (including name, latitude, and longitude)
restaurants_gdf[['name', 'latitude', 'longitude']].to_csv("restaurants_osm.csv", index=False)

print("Restaurants data saved as 'restaurants_osm.csv'!")

!pip install -q h3>=4.0.0

import pandas as pd
import h3

def assign_restaurants_to_hexagons(csv_file, resolution=7):
    """
    Reads a CSV file of restaurants, assigns each restaurant to an H3 hexagon,
    and returns a dictionary mapping hexagons to restaurant lists.

    Args:
        csv_file (str): Path to the CSV file containing 'latitude' and 'longitude'.
        resolution (int): H3 resolution level (default is 7).

    Returns:
        dict: Hexagon index -> List of restaurant names
    """

    # Load the CSV file
    df = pd.read_csv(csv_file)

    # Check if required columns exist
    if 'latitude' not in df.columns or 'longitude' not in df.columns:
        raise ValueError("CSV must contain 'latitude' and 'longitude' columns")

    # Create a dictionary to store hexagons
    hex_map = {}

    for _, row in df.iterrows():
        lat, lon = row['latitude'], row['longitude']
        restaurant_name = row.get('name', 'Unknown Restaurant')  # Use 'name' column if available

        # Convert lat/lon to an H3 hexagon index
        h3_index = h3.latlng_to_cell(lat, lon, resolution)  # Fixed function

        # Group restaurants by hexagon
        if h3_index not in hex_map:
            hex_map[h3_index] = []

        hex_map[h3_index].append(restaurant_name)

    return hex_map

# Example usage
hexagon_mapping = assign_restaurants_to_hexagons("restaurants_osm.csv")
for hex_id, restaurants in hexagon_mapping.items():
    print(f"Hexagon {hex_id} contains restaurants: {restaurants}")

"""want to check whether a user looking for restaurants falls inside a particular hexagon"""

import pandas as pd
import h3

def assign_restaurants_to_hexagons(csv_file, resolution=7):
    """
    Reads a CSV file of restaurants, assigns each restaurant to an H3 hexagon,
    and returns a dictionary mapping hexagons to restaurant lists.

    Args:
        csv_file (str): Path to the CSV file containing 'latitude' and 'longitude'.
        resolution (int): H3 resolution level (default is 7).

    Returns:
        dict: Hexagon index -> List of restaurant names
    """

    # Load the CSV file
    df = pd.read_csv(csv_file)

    # Check if required columns exist
    if 'latitude' not in df.columns or 'longitude' not in df.columns:
        raise ValueError("CSV must contain 'latitude' and 'longitude' columns")

    # Create a dictionary to store hexagons
    hex_map = {}

    for _, row in df.iterrows():
        lat, lon = row['latitude'], row['longitude']
        restaurant_name = row.get('name', 'Unknown Restaurant')  # Use 'name' column if available

        # Convert lat/lon to an H3 hexagon index
        h3_index = h3.latlng_to_cell(lat, lon, resolution)

        # Group restaurants by hexagon
        if h3_index not in hex_map:
            hex_map[h3_index] = []

        hex_map[h3_index].append(restaurant_name)

    return hex_map

def find_restaurants_near_user(user_lat, user_lon, hex_map, resolution=7):
    """
    Finds restaurants in the same hexagon where the user is located.

    Args:
        user_lat (float): User's latitude.
        user_lon (float): User's longitude.
        hex_map (dict): Mapping of hexagons to restaurants.
        resolution (int): H3 resolution level (default is 7).

    Returns:
        list: List of restaurant names in the user's hexagon (or an empty list if none found).
    """

    # Convert user's location to an H3 hexagon
    user_hex = h3.latlng_to_cell(user_lat, user_lon, resolution)

    # Check if this hexagon contains restaurants
    if user_hex in hex_map:
        return hex_map[user_hex]  # Return list of restaurants in this hexagon
    else:
        return []  # No restaurants in this hexagon

# Load restaurant data and assign hexagons
hexagon_mapping = assign_restaurants_to_hexagons("restaurants_osm.csv")

# Example: Simulate a user searching for restaurants at a random location in Bengaluru
user_lat, user_lon = 12.9716, 77.5946  # Example: Latitude and Longitude in Bengaluru

# Find nearby restaurants
restaurants_near_user = find_restaurants_near_user(user_lat, user_lon, hexagon_mapping)

# Display results
if restaurants_near_user:
    print(f"User is in hexagon {h3.latlng_to_cell(user_lat, user_lon, 7)}")
    print("Restaurants available:", restaurants_near_user)
else:
    print("No restaurants found in your area.")

import pandas as pd
import h3
import random

def assign_restaurants_to_hexagons(csv_file, resolution=7):
    """
    Reads a CSV file of restaurants, assigns each restaurant to an H3 hexagon,
    and returns a dictionary mapping hexagons to restaurant lists.

    Args:
        csv_file (str): Path to the CSV file containing 'latitude' and 'longitude'.
        resolution (int): H3 resolution level (default is 7).

    Returns:
        dict: Hexagon index -> List of restaurant names
    """

    # Load the CSV file
    df = pd.read_csv(csv_file)

    # Check if required columns exist
    if 'latitude' not in df.columns or 'longitude' not in df.columns:
        raise ValueError("CSV must contain 'latitude' and 'longitude' columns")

    # Create a dictionary to store hexagons
    hex_map = {}

    for _, row in df.iterrows():
        lat, lon = row['latitude'], row['longitude']
        restaurant_name = row.get('name', 'Unknown Restaurant')  # Use 'name' column if available

        # Convert lat/lon to an H3 hexagon index
        h3_index = h3.latlng_to_cell(lat, lon, resolution)

        # Group restaurants by hexagon
        if h3_index not in hex_map:
            hex_map[h3_index] = []

        hex_map[h3_index].append(restaurant_name)

    return hex_map

def find_restaurants_near_user(user_lat, user_lon, hex_map, resolution=7):
    """
    Finds restaurants in the same hexagon where the user is located.

    Args:
        user_lat (float): User's latitude.
        user_lon (float): User's longitude.
        hex_map (dict): Mapping of hexagons to restaurants.
        resolution (int): H3 resolution level (default is 7).

    Returns:
        tuple: (Hexagon index, List of restaurant names in the user's hexagon)
    """

    # Convert user's location to an H3 hexagon
    user_hex = h3.latlng_to_cell(user_lat, user_lon, resolution)

    # Check if this hexagon contains restaurants
    if user_hex in hex_map:
        return user_hex, hex_map[user_hex]  # Return hex ID and list of restaurants
    else:
        return user_hex, []  # No restaurants in this hexagon

# Load restaurant data and assign hexagons
hexagon_mapping = assign_restaurants_to_hexagons("restaurants_osm.csv")

# Generate a random latitude & longitude in Bengaluru
random_lat = random.uniform(12.85, 13.1)  # Latitude range for Bengaluru
random_lon = random.uniform(77.5, 77.8)   # Longitude range for Bengaluru

# Find nearby restaurants for the random location
user_hex, restaurants_near_user = find_restaurants_near_user(random_lat, random_lon, hexagon_mapping)

# Display results
print(f"User's random location: Latitude {random_lat}, Longitude {random_lon}")
print(f"User is in hexagon {user_hex}")

if restaurants_near_user:
    print("Restaurants nearby:", restaurants_near_user)
else:
    print("No restaurants found in this area.")